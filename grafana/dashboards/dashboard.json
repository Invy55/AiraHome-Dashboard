{
  "__elements": {},
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "12.1.0"
    },
    {
      "type": "datasource",
      "id": "influxdb",
      "name": "InfluxDB",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": ""
    },
    {
      "type": "panel",
      "id": "state-timeline",
      "name": "State timeline",
      "version": ""
    },
    {
      "type": "panel",
      "id": "text",
      "name": "Text",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 2,
  "id": null,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "influxdb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "transparent",
            "mode": "fixed"
          },
          "custom": {
            "axisPlacement": "auto",
            "fillOpacity": 100,
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineWidth": 0,
            "spanNulls": false
          },
          "mappings": [
            {
              "options": {
                "0": {
                  "color": "transparent",
                  "index": 1,
                  "text": "No"
                },
                "1": {
                  "color": "#12b129",
                  "index": 2,
                  "text": "Yes"
                }
              },
              "type": "value"
            },
            {
              "options": {
                "match": "null+nan",
                "result": {
                  "color": "transparent",
                  "index": 0,
                  "text": "Unknown"
                }
              },
              "type": "special"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "blue",
                "value": 0
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Online"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 2,
        "w": 16,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "alignValue": "center",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": true,
        "rowHeight": 0.9,
        "showValue": "never",
        "tooltip": {
          "hideZeros": false,
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "12.1.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "query": "from(bucket: \"devices\")\r\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"heat_pump\" and r.id == \"${id}\")\r\n  |> map(fn: (r) => ({\r\n      r with\r\n      _value: if r._value then 1\r\n              else 0\r\n    }))\r\n  |> aggregateWindow(every: ${query_time}, fn: max, createEmpty: true)\r\n  |> fill(value: 0)\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)\r\n\r\n",
          "refId": "A"
        }
      ],
      "transparent": true,
      "type": "state-timeline"
    },
    {
      "gridPos": {
        "h": 7,
        "w": 8,
        "x": 16,
        "y": 0
      },
      "id": 10,
      "options": {
        "code": {
          "language": "html",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<style>\n    .view_container {\n        display: flex;\n        justify-content: center; /* Horizontally center */\n        align-items: center;    /* Vertically center */\n    }\n    \n    .view_frame {\n        text-align: center;\n        display: block;\n        border: none; /* Remove default iframe border */\n        width: 449.1575px;\n        height: 215.2533px;\n        background-color: #111217;\n    }\n\n</style>\n<script>\n//window.addEventListener(\"load\", function() {\nfunction doEverything() {\n    let view_frame = document.getElementById('view_frame');\n    let view_container = document.getElementById('view_container');\n    let raw_data;\n    let data;\n    let temp_data;\n    let key;\n    let cur_key;\n    let cur_data;\n    view_frame.addEventListener('load', function() {\n        view_container.style.height = view_container.parentElement.offsetHeight - 6 + \"px\";\n        //view_container.style.width = view_container.parentElement.offsetWidth - 6 + \"px\";\n        if (!view_frame.src) {\n            raw_data = `${cur_data:csv}`.split('_measurement:');\n            data = {};\n            raw_data.forEach(function(measurement) {\n                temp_data = measurement.split(',');\n                if (temp_data.length > 0) {\n                    //console.log(temp_data);\n                    key = temp_data[0].trim();\n                    data[key] = {};\n                    temp_data.slice(1).forEach(function(item) {\n                        if (!item.includes(':')) {\n                            return; // Skip if no colon is found\n                        }\n                        [cur_key, value] = item.split(':', 2);\n                        if (!cur_key || !value) {\n                            return; // Skip if either key or value is missing\n                        }\n                        data[key][cur_key.trim()] = value.trim();\n                    });\n                }\n            });\n            view_frame.src = window.location.protocol + \"//\" + window.location.hostname + \":\" + window.location.port + \"/static/?data=\" + encodeURIComponent(JSON.stringify(data));\n            window.addEventListener('message', (event) => {\n                if (event.data.action === view_frame.src) {\n                    view_frame.style.opacity = \"1\";\n                }\n            });\n            \n        }\n    });\n}\ndoEverything();\n//});\n</script>\n<div id=\"view_container\" class=\"view_container\">\n    <iframe id=\"view_frame\" class=\"view_frame\" style=\"opacity: 0;\">\n        If you are seeing this it means that your browser does not support Iframes. Please use an updated browser...\n    </iframe>\n</div>",
        "mode": "html"
      },
      "pluginVersion": "12.1.0",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "influxdb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "axisPlacement": "auto",
            "fillOpacity": 100,
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": 65000,
            "lineWidth": 0,
            "spanNulls": false
          },
          "mappings": [
            {
              "options": {
                "SEVERITY_CRITICAL": {
                  "color": "#db2929",
                  "index": 1
                },
                "SEVERITY_ERROR": {
                  "color": "#f3712b",
                  "index": 2
                },
                "SEVERITY_UNSPECIFIED": {
                  "color": "#a8a8a8",
                  "index": 0
                },
                "SEVERITY_WARNING": {
                  "color": "#ffb84d",
                  "index": 3
                }
              },
              "type": "value"
            }
          ],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 16,
        "x": 0,
        "y": 2
      },
      "id": 7,
      "options": {
        "alignValue": "left",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": false,
        "rowHeight": 0.5,
        "showValue": "never",
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.1.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "query": "from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"error\")\r\n  |> filter(fn: (r) => r[\"id\"] == \"${id}\")\r\n  |> keep(columns: [\"_time\", \"ccv\", \"severity\"])\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"ccv\"], valueColumn: \"severity\")",
          "refId": "A"
        }
      ],
      "title": "Errors",
      "transformations": [
        {
          "id": "labelsToFields",
          "options": {
            "mode": "columns",
            "valueLabel": "ccv"
          }
        }
      ],
      "transparent": true,
      "type": "state-timeline"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "influxdb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Temperature",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Outside Temperature"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#65b5f6",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Zone 1 Temperature"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#ffb84d",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "C"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Zone 2 Temperature"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#ff6e61",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.*humidity.*/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.axisLabel",
                "value": "Humidity"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "D"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Zone 1 Humidity"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#4eb7ac",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "E"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Zone 2 Humidity"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#bb69c9",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 7
      },
      "id": 5,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.1.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "query": "from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"heat_pump\")\r\n  |> filter(fn: (r) => r._field == \"current_outdoor_temperature\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "hide": false,
          "query": "from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"thermostat\")\r\n  |> filter(fn: (r) => r._field == \"actual_temperature\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> filter(fn: (r) => r.zone == \"1\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "hide": false,
          "query": "from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"thermostat\")\r\n  |> filter(fn: (r) => r._field == \"humidity\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> filter(fn: (r) => r.zone == \"1\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
          "refId": "D"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "hide": false,
          "query": "from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"thermostat\")\r\n  |> filter(fn: (r) => r._field == \"actual_temperature\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> filter(fn: (r) => r.zone == \"2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "hide": false,
          "query": "from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"thermostat\")\r\n  |> filter(fn: (r) => r._field == \"humidity\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> filter(fn: (r) => r.zone == \"2\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
          "refId": "E"
        }
      ],
      "title": "Ambient",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "influxdb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "Temperature",
            "axisPlacement": "left",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              }
            ]
          },
          "unit": "celsius"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "A"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Current Temperature"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#65b5f6",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "B"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Target Temperature"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "text",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    10,
                    10
                  ],
                  "fill": "dash"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "C"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Water Heating"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#ff6e61",
                  "mode": "fixed"
                }
              },
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "0": {
                        "index": 1,
                        "text": "Disabled"
                      },
                      "1": {
                        "index": 0,
                        "text": "Enabled"
                      }
                    },
                    "type": "value"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "pump_active_state"
            },
            "properties": [
              {
                "id": "max",
                "value": 1
              },
              {
                "id": "min",
                "value": 0
              },
              {
                "id": "unit"
              },
              {
                "id": "custom.fillOpacity",
                "value": 33
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "custom.axisWidth"
              },
              {
                "id": "custom.axisLabel",
                "value": "Heating"
              },
              {
                "id": "decimals",
                "value": 0
              },
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "0": {
                        "index": 1,
                        "text": "Disabled"
                      },
                      "1": {
                        "index": 0,
                        "text": "Enabled"
                      }
                    },
                    "type": "value"
                  }
                ]
              },
              {
                "id": "custom.lineInterpolation",
                "value": "stepAfter"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "D"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "#f58b51",
                  "mode": "fixed"
                }
              },
              {
                "id": "displayName",
                "value": "Legionella Cycle"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "E"
            },
            "properties": [
              {
                "id": "max",
                "value": 1
              },
              {
                "id": "min",
                "value": 0
              },
              {
                "id": "unit"
              },
              {
                "id": "custom.fillOpacity",
                "value": 33
              },
              {
                "id": "custom.lineWidth",
                "value": 0
              },
              {
                "id": "custom.axisPlacement",
                "value": "right"
              },
              {
                "id": "custom.axisWidth"
              },
              {
                "id": "custom.axisLabel",
                "value": "Heating"
              },
              {
                "id": "decimals",
                "value": 0
              },
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "0": {
                        "index": 0,
                        "text": "Disabled"
                      },
                      "1": {
                        "index": 1,
                        "text": "Enabled"
                      },
                      "0.5": {
                        "index": 2,
                        "text": "Enabled"
                      }
                    },
                    "type": "value"
                  }
                ]
              },
              {
                "id": "custom.lineInterpolation",
                "value": "stepAfter"
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#6adc8b",
                  "mode": "fixed"
                }
              },
              {
                "id": "displayName",
                "value": "Inline Heater"
              }
            ]
          },
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "F"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Last Start Temperature"
              },
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [
                    0,
                    10
                  ],
                  "fill": "dot"
                }
              },
              {
                "id": "color",
                "value": {
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 16
      },
      "id": 11,
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "12.1.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "hide": false,
          "query": "from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"heat_pump\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> filter(fn: (r) => r._field == \"pump_active_state\")\r\n  |> map(fn: (r) => ({\r\n      r with\r\n      _value: if r._value == \"PUMP_ACTIVE_STATE_DHW\" then 1\r\n              //else if r._value == \"PUMP_ACTIVE_STATE_IDLE\" then 0\r\n              else 0\r\n    }))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)",
          "refId": "C"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "hide": false,
          "query": "from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"heat_pump\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> filter(fn: (r) => r._field == \"pump_active_state\")\r\n  |> map(fn: (r) => ({\r\n      r with\r\n      _value: if r._value == \"PUMP_ACTIVE_STATE_ANTI_LEGIONELLA\" then 1\r\n              //else if r._value == \"PUMP_ACTIVE_STATE_IDLE\" then 0\r\n              else 0\r\n    }))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)",
          "refId": "D"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "hide": false,
          "query": "from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"heat_pump\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> filter(fn: (r) => r._field == \"inline_heater_active\")\r\n  |> map(fn: (r) => ({\r\n      r with\r\n      _value: if r._value then .5\r\n              else 0.0\r\n    }))\r\n  |> aggregateWindow(every: v.windowPeriod, fn: max, createEmpty: false)",
          "refId": "E"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "hide": false,
          "query": "from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"water_heater\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> filter(fn: (r) => r._field == \"current_hot_water_temperature\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n",
          "refId": "A"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "hide": false,
          "query": "from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"water_heater\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> filter(fn: (r) => r._field == \"target_hot_water_temperature\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\r\n",
          "refId": "B"
        },
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "hide": false,
          "query": "// 1. Get first DHW Heating Time\r\npumpOn = from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"heat_pump\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> filter(fn: (r) => r._field == \"pump_active_state\")\r\n  |> filter(fn: (r) => r._value == \"PUMP_ACTIVE_STATE_DHW\")\r\n  |> first()\r\n  |> keep(columns: [\"_time\"])\r\n\r\n// 2. Get temperature at that time\r\ntemps = from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"water_heater\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> filter(fn: (r) => r._field == \"current_hot_water_temperature\")\r\n\r\n// join\r\npumpTemp = join(tables: {pump: pumpOn, temp: temps}, on: [\"_time\"])\r\n  |> findRecord(fn: (key) => true, idx: 0) // get single row\r\n\r\n// 3. Replay constant value over full range\r\nfrom(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"water_heater\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> filter(fn: (r) => r._field == \"current_hot_water_temperature\")\r\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: true)\r\n  |> map(fn: (r) => ({ r with _value: pumpTemp._value }))\r\n",
          "refId": "F"
        }
      ],
      "title": "Domestic Hot Water",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 0,
        "y": 25
      },
      "id": 13,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<style>\n    .command_container {\n        display: flex;\n        justify-content: center; /* Horizontally center */\n        align-items: center;    /* Vertically center */\n    }\n    \n    .command_frame {\n        text-align: center;\n        display: block;\n        border: none; /* Remove default iframe border */\n        width: 100%;\n        height: 100%;\n        background-color: #111217;\n    }\n\n</style>\n<script>\n//window.addEventListener(\"load\", function() {\nfunction doEverything() {\n    let command_frame = document.getElementById('command_frame');\n    let command_container = document.getElementById('command_container');\n    let heatpump_id;\n    command_frame.addEventListener('load', function() {\n        command_container.style.height = command_container.parentElement.offsetHeight - 6 + \"px\";\n        //view_container.style.width = view_container.parentElement.offsetWidth - 6 + \"px\";\n        if (!command_frame.src) {\n            heatpump_id = `${id}`;\n            command_frame.src = window.location.protocol + \"//\" + window.location.hostname + \":\" + window.location.port + \"/static/commands/?heatpump_id=\" + encodeURIComponent(heatpump_id);\n            window.addEventListener('message', (event) => {\n                if (event.data.action === command_frame.src) {\n                    command_frame.style.opacity = \"1\";\n                }\n            });\n        }\n    });\n}\ndoEverything();\n//});\n</script>\n<div id=\"command_container\" class=\"command_container\">\n    <iframe id=\"command_frame\" class=\"command_frame\" style=\"opacity: 0;\">\n        If you are seeing this it means that your browser does not support Iframes. Please use an updated browser...\n    </iframe>\n</div>",
        "mode": "html"
      },
      "pluginVersion": "12.1.0",
      "title": "Commands",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "influxdb"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-RdYlGr"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": 0
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 5,
        "x": 12,
        "y": 25
      },
      "id": 12,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "12.1.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb"
          },
          "query": "from(bucket: \"states\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r._measurement == \"thermostat\")\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> filter(fn: (r) => r._field == \"rssi\")\r\n  |> last()\r\n",
          "refId": "A"
        }
      ],
      "title": "Current Thermostats RSSI",
      "transformations": [
        {
          "id": "renameByRegex",
          "options": {
            "regex": ".*zone=\\\"(.*)\\\".*",
            "renamePattern": "Zone $1"
          }
        }
      ],
      "transparent": true,
      "type": "stat"
    }
  ],
  "refresh": "1m",
  "schemaVersion": 41,
  "tags": [],
  "templating": {
    "list": [
      {
        "allowCustomValue": false,
        "current": {},
        "definition": "import \"influxdata/influxdb/schema\"\r\nschema.tagValues(\r\n  bucket: \"devices\",\r\n  tag: \"id\",\r\n  start: time(v: 0)\r\n)",
        "label": "Heatpump ID",
        "name": "id",
        "options": [],
        "query": {
          "query": "import \"influxdata/influxdb/schema\"\r\nschema.tagValues(\r\n  bucket: \"devices\",\r\n  tag: \"id\",\r\n  start: time(v: 0)\r\n)"
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      },
      {
        "hide": 2,
        "name": "query_time",
        "query": "65s",
        "skipUrlSync": true,
        "type": "constant",
        "current": {
          "value": "65s",
          "text": "65s",
          "selected": false
        },
        "options": [
          {
            "value": "65s",
            "text": "65s",
            "selected": false
          }
        ]
      },
      {
        "allowCustomValue": true,
        "current": {},
        "definition": "from(bucket: \"states\")\r\n  |> range(start: -${query_time})\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> last()\r\n  |> group(columns: [\"_measurement\"])                         // Group by measurement so we process each separately\r\n  |> map(fn: (r) => ({                                         // Transform each row\r\n      // If zone tag exists and is not empty, append it to measurement name\r\n      _measurement: if exists(r.zone) and r.zone != \"\" \r\n                        then r._measurement + \"_\" + r.zone\r\n                        else r._measurement,\r\n      _field: r._field,                                       // Keep field name\r\n      kv: r._field + \": \" + string(v: r._value)               // Create \"field: value\" string\r\n  }))\r\n  |> group(columns: [\"_measurement\"])                         // Regroup by updated measurement names\r\n  |> reduce(                                                   // Combine all kv strings per measurement\r\n      fn: (r, accumulator) => ({\r\n        _measurement: r._measurement,                         // Keep measurement name\r\n        fields: if accumulator.fields == \"\"                   // First row in group\r\n                   then \"_measurement: \" + r._measurement + \", \" + r.kv  // Start string\r\n                   else accumulator.fields + \", \" + r.kv      // Append to existing string\r\n      }),\r\n      identity: { _measurement: \"\", fields: \"\" }              // Initial accumulator values\r\n  )\r\n",
        "hide": 2,
        "includeAll": true,
        "multi": true,
        "name": "cur_data",
        "options": [],
        "query": {
          "query": "from(bucket: \"states\")\r\n  |> range(start: -${query_time})\r\n  |> filter(fn: (r) => r.id == \"${id}\")\r\n  |> last()\r\n  |> group(columns: [\"_measurement\"])                         // Group by measurement so we process each separately\r\n  |> map(fn: (r) => ({                                         // Transform each row\r\n      // If zone tag exists and is not empty, append it to measurement name\r\n      _measurement: if exists(r.zone) and r.zone != \"\" \r\n                        then r._measurement + \"_\" + r.zone\r\n                        else r._measurement,\r\n      _field: r._field,                                       // Keep field name\r\n      kv: r._field + \": \" + string(v: r._value)               // Create \"field: value\" string\r\n  }))\r\n  |> group(columns: [\"_measurement\"])                         // Regroup by updated measurement names\r\n  |> reduce(                                                   // Combine all kv strings per measurement\r\n      fn: (r, accumulator) => ({\r\n        _measurement: r._measurement,                         // Keep measurement name\r\n        fields: if accumulator.fields == \"\"                   // First row in group\r\n                   then \"_measurement: \" + r._measurement + \", \" + r.kv  // Start string\r\n                   else accumulator.fields + \", \" + r.kv      // Append to existing string\r\n      }),\r\n      identity: { _measurement: \"\", fields: \"\" }              // Initial accumulator values\r\n  )\r\n"
        },
        "refresh": 2,
        "regex": "",
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-3h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "AiraHome - Dashboard",
  "uid": "beuirjjdi4cu8c",
  "version": 3,
  "weekStart": ""
}